// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwilioJokeTeller.Models;

#nullable disable

namespace TwilioJokeTeller.Migrations
{
    [DbContext(typeof(JokeTellerContext))]
    [Migration("20211216103323_intialMigrate")]
    partial class intialMigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TwilioJokeTeller.Models.Joke", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Jokes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Answer = "Because it was too tired!",
                            Question = "Why did the bike go to sleep early?"
                        },
                        new
                        {
                            ID = 2,
                            Answer = "You hit rock bottom!",
                            Question = "What happens when you slap Dwayne Johnson's butt?"
                        },
                        new
                        {
                            ID = 3,
                            Answer = "Because they are full of antybodies!",
                            Question = "Why don't ant eaters get sick?"
                        },
                        new
                        {
                            ID = 4,
                            Answer = "Sofishticated!",
                            Question = "What do you call a fish wearing a bow tie?"
                        },
                        new
                        {
                            ID = 5,
                            Answer = "You look like a funguy!",
                            Question = "What did one mushroom say to the other mushroom?"
                        },
                        new
                        {
                            ID = 6,
                            Answer = "No seriously guys. I can't figure out how to get to the bulb. There's nothing to grab. Please send help",
                            Question = "How many web developers does it take to screw in a lightbulb?"
                        },
                        new
                        {
                            ID = 7,
                            Answer = "Ground beef!",
                            Question = "What do you call a cow with no legs?"
                        });
                });

            modelBuilder.Entity("TwilioJokeTeller.Models.Subscriber", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Subscribers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Subscriber");
                });

            modelBuilder.Entity("TwilioJokeTeller.Models.UnverifiedSubscriber", b =>
                {
                    b.HasBaseType("TwilioJokeTeller.Models.Subscriber");

                    b.Property<DateTime>("SubscribeDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("UnverifiedSubscriber");
                });

            modelBuilder.Entity("TwilioJokeTeller.Models.VerifiedSubscriber", b =>
                {
                    b.HasBaseType("TwilioJokeTeller.Models.Subscriber");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("VerifiedSubscriber");
                });
#pragma warning restore 612, 618
        }
    }
}
